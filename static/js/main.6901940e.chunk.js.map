{"version":3,"sources":["serviceWorker.js","SearchBox.js","Card.js","CardList.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SeachBox","searchChange","className","type","placeholder","onChange","Card","props","style","width","spacing","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","Scroll","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","Response","json","users","filtetredRobots","this","filter","robot","toLowerCase","includes","console","log","SearchBox","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EATA,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACb,OACI,yBAAKC,UAAU,OACf,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,gBAC9EC,SAAUJ,MCQHK,EAZJ,SAACC,GACR,OACI,yBAAKL,UAAU,uDAAuDM,MAAO,CAACC,MAAM,MAAMC,QAAQ,QAC9F,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAAMM,MACrD,6BACI,4BAAKN,EAAMO,MACX,2BAAIP,EAAMQ,UCSXC,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACnBR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAGrB,OACI,6BACKG,ICFEK,G,MATF,SAAChB,GAEV,OACI,yBAAKC,MAAO,CAACgB,UAAU,SAASC,OAAO,UAClClB,EAAMmB,YCuCJC,E,kDAtCX,aAAc,IAAD,8BACT,gBAeJC,eAAe,SAACC,GACR,EAAKC,SAAU,CAAEC,YAAaF,EAAMG,OAAOC,SAf/C,EAAKC,MAAM,CACPjB,OAAO,GACPc,YAAa,IAJR,E,gEAQO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GACtD,OAAQA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACb,OAAOsB,S,+BAQrB,IAAD,OACEC,EAAgBC,KAAKP,MAAMjB,OAAOyB,QAAO,SAAAC,GAC3C,OAAOA,EAAM7B,KAAK8B,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGpE,OADAE,QAAQC,IAAIP,GAER,yBAAKtC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC8C,EAAD,CAAW/C,aAAcwC,KAAKb,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUX,OAAQuB,U,GA/BpBS,IAAMC,WCExBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,a","file":"static/js/main.6901940e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst SeachBox=({searchChange})=>{\n    return (\n        <div className='pa2'>\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' \n        onChange={searchChange} />\n        </div>\n    );\n}\n\nexport default SeachBox;","import React from 'react';\n\nconst Card=(props) =>{\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 ' style={{width:'20%',spacing:'5px'}} >\n            <img alt='robots' src={`https://robohash.org/${props.id}`} />\n            <div >\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    ); \n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    const cardComponent=robots.map((user,i)=>{\n        return (<Card key={i} \n        id={robots[i].id} \n        name={robots[i].name}   \n        email={robots[i].email} />\n        );\n    })\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nconst Scroll=(props)=>{\n\n    return (\n        <div style={{overflowY:'scroll',height:'500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\nimport SearchBox from './SearchBox'\nimport CardList from './CardList';\nimport './App.css';\nimport Scroll from './Scroll';\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            robots:[],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(Response=>{\n           return  Response.json();\n        }).then(users=>{\n            this.setState({robots:users});\n        });\n        \n    }\n    onSearchChange=(event)=>{\n            this.setState( { searchfield :event.target.value});\n            \n    }\n    render(){\n        const filtetredRobots=this.state.robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        console.log(filtetredRobots);\n        return(\n            <div className='tc'>\n                <h1 className='f2'>ROBOFRIENDS</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filtetredRobots} />\n                </Scroll>\n            </div>\n        );\n    }\n    \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}